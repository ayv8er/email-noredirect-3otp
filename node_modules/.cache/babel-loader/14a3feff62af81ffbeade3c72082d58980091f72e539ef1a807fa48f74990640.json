{"ast":null,"code":"var m = (a => (a.MissingApiKey = \"MISSING_API_KEY\", a.ModalNotReady = \"MODAL_NOT_READY\", a.MalformedResponse = \"MALFORMED_RESPONSE\", a.InvalidArgument = \"INVALID_ARGUMENT\", a.ExtensionNotInitialized = \"EXTENSION_NOT_INITIALIZED\", a.IncompatibleExtensions = \"INCOMPATIBLE_EXTENSIONS\", a))(m || {}),\n  p = (l => (l.SyncWeb3Method = \"SYNC_WEB3_METHOD\", l.DuplicateIframe = \"DUPLICATE_IFRAME\", l.ReactNativeEndpointConfiguration = \"REACT_NATIVE_ENDPOINT_CONFIGURATION\", l.DeprecationNotice = \"DEPRECATION_NOTICE\", l.ProductAnnouncement = \"ANNOUNCEMENT\", l))(p || {}),\n  _ = (t => (t[t.ParseError = -32700] = \"ParseError\", t[t.InvalidRequest = -32600] = \"InvalidRequest\", t[t.MethodNotFound = -32601] = \"MethodNotFound\", t[t.InvalidParams = -32602] = \"InvalidParams\", t[t.InternalError = -32603] = \"InternalError\", t[t.MagicLinkFailedVerification = -1e4] = \"MagicLinkFailedVerification\", t[t.MagicLinkExpired = -10001] = \"MagicLinkExpired\", t[t.MagicLinkRateLimited = -10002] = \"MagicLinkRateLimited\", t[t.MagicLinkInvalidRedirectURL = -10006] = \"MagicLinkInvalidRedirectURL\", t[t.UserAlreadyLoggedIn = -10003] = \"UserAlreadyLoggedIn\", t[t.UpdateEmailFailed = -10004] = \"UpdateEmailFailed\", t[t.UserRequestEditEmail = -10005] = \"UserRequestEditEmail\", t[t.InactiveRecipient = -10010] = \"InactiveRecipient\", t[t.AccessDeniedToUser = -10011] = \"AccessDeniedToUser\", t[t.RedirectLoginComplete = -10015] = \"RedirectLoginComplete\", t))(_ || {});\nvar u = (s => (s.MetaMask = \"metamask\", s.CoinbaseWallet = \"coinbase_wallet\", s))(u || {}),\n  d = (i => (i.WalletSelected = \"wallet_selected\", i.WalletConnected = \"wallet_connected\", i.WalletRejected = \"wallet_rejected\", i))(d || {}),\n  g = (e => (e.LoginWithSms = \"magic_auth_login_with_sms\", e.LoginWithEmailOTP = \"magic_auth_login_with_email_otp\", e.LoginWithMagicLink = \"magic_auth_login_with_magic_link\", e.LoginWithCredential = \"magic_auth_login_with_credential\", e.SetAuthorizationToken = \"magic_auth_set_authorization_token\", e.GetIdToken = \"magic_auth_get_id_token\", e.GenerateIdToken = \"magic_auth_generate_id_token\", e.GetMetadata = \"magic_auth_get_metadata\", e.IsLoggedIn = \"magic_is_logged_in\", e.Logout = \"magic_auth_logout\", e.UpdateEmail = \"magic_auth_update_email\", e.UserSettings = \"magic_auth_settings\", e.UserSettingsTestMode = \"magic_auth_settings_testing_mode\", e.LoginWithSmsTestMode = \"magic_auth_login_with_sms_testing_mode\", e.LoginWithEmailOTPTestMode = \"magic_auth_login_with_email_otp_testing_mode\", e.LoginWithMagicLinkTestMode = \"magic_login_with_magic_link_testing_mode\", e.LoginWithCredentialTestMode = \"magic_auth_login_with_credential_testing_mode\", e.GetIdTokenTestMode = \"magic_auth_get_id_token_testing_mode\", e.GenerateIdTokenTestMode = \"magic_auth_generate_id_token_testing_mode\", e.GetMetadataTestMode = \"magic_auth_get_metadata_testing_mode\", e.IsLoggedInTestMode = \"magic_auth_is_logged_in_testing_mode\", e.LogoutTestMode = \"magic_auth_logout_testing_mode\", e.UpdateEmailTestMode = \"magic_auth_update_email_testing_mode\", e.IntermediaryEvent = \"magic_intermediary_event\", e.RequestAccounts = \"eth_requestAccounts\", e.GetInfo = \"magic_get_info\", e.ShowUI = \"magic_wallet\", e.NFTPurchase = \"magic_nft_purchase\", e.NFTCheckout = \"magic_nft_checkout\", e.NFTTransfer = \"magic_nft_transfer\", e.RequestUserInfoWithUI = \"mc_request_user_info\", e.Disconnect = \"mc_disconnect\", e.RecoverAccount = \"magic_auth_recover_account\", e.RecoverAccountTestMode = \"magic_auth_recover_account_testing_mode\", e.MagicBoxHeartBeat = \"magic_box_heart_beat\", e.AutoConnect = \"mc_auto_connect\", e.Login = \"mc_login\", e.EncryptV1 = \"magic_auth_encrypt_v1\", e.DecryptV1 = \"magic_auth_decrypt_v1\", e.ShowNFTs = \"magic_show_nfts\", e.ShowOnRamp = \"magic_show_fiat_onramp\", e.ShowSendTokensUI = \"magic_show_send_tokens_ui\", e.ShowAddress = \"magic_show_address\", e.ShowBalances = \"magic_show_balances\", e.SendGaslessTransaction = \"eth_sendGaslessTransaction\", e.RevealPK = \"magic_reveal_key\", e))(g || {});\nvar v = (c => (c.MAGIC_HANDLE_RESPONSE = \"MAGIC_HANDLE_RESPONSE\", c.MAGIC_OVERLAY_READY = \"MAGIC_OVERLAY_READY\", c.MAGIC_SHOW_OVERLAY = \"MAGIC_SHOW_OVERLAY\", c.MAGIC_HIDE_OVERLAY = \"MAGIC_HIDE_OVERLAY\", c.MAGIC_HANDLE_EVENT = \"MAGIC_HANDLE_EVENT\", c.MAGIC_MG_BOX_SEND_RECEIPT = \"MAGIC_MG_BOX_SEND_RECEIPT\", c.MAGIC_SEND_PRODUCT_ANNOUNCEMENT = \"MAGIC_SEND_PRODUCT_ANNOUNCEMENT\", c))(v || {}),\n  f = (n => (n.MAGIC_HANDLE_REQUEST = \"MAGIC_HANDLE_REQUEST\", n))(f || {});\nvar E = (i => (i.UpdateEmail = \"update-email\", i.MFA = \"mfa\", i.Recovery = \"recovery\", i))(E || {});\nvar x = (n => (n.Retry = \"retry\", n))(x || {}),\n  N = (s => (s.EmailSent = \"email-sent\", s.EmailNotDeliverable = \"email-not-deliverable\", s))(N || {}),\n  T = (s => (s.VerifyEmailOtp = \"verify-email-otp\", s.Cancel = \"cancel\", s))(T || {}),\n  I = (i => (i.EmailOTPSent = \"email-otp-sent\", i.InvalidEmailOtp = \"invalid-email-otp\", i.ExpiredEmailOtp = \"expired-email-otp\", i))(I || {}),\n  R = (n => (n.Retry = \"device-retry\", n))(R || {}),\n  A = (r => (r.DeviceApproved = \"device-approved\", r.DeviceNeedsApproval = \"device-needs-approval\", r.DeviceVerificationLinkExpired = \"device-verification-link-expired\", r.DeviceVerificationEmailSent = \"device-verification-email-sent\", r))(A || {}),\n  h = (i => (i.Retry = \"Recency/auth-factor-retry\", i.Cancel = \"Recency/auth-factor-verification-cancel\", i.VerifyEmailOtp = \"Recency/auth-factor-verify-email-otp\", i))(h || {}),\n  y = (a => (a.PrimaryAuthFactorNeedsVerification = \"Recency/auth-factor-needs-verification\", a.PrimaryAuthFactorVerified = \"Recency/auth-factor-verified\", a.InvalidEmailOtp = \"Recency/auth-factor-invalid-email-otp\", a.EmailExpired = \"Recency/auth-factor-verification-email-expired\", a.EmailSent = \"Recency/auth-factor-verification-email-sent\", a.EmailNotDeliverable = \"Recency/auth-factor-verification-email-not-deliverable\", a))(y || {}),\n  k = (i => (i.RetryWithNewEmail = \"UpdateEmail/retry-with-new-email\", i.Cancel = \"UpdateEmail/new-email-verification-cancel\", i.VerifyEmailOtp = \"UpdateEmail/new-email-verify-otp\", i))(k || {}),\n  L = (o => (o.NewAuthFactorNeedsVerification = \"UpdateEmail/new-email-needs-verification\", o.EmailUpdated = \"UpdateEmail/email-updated\", o.InvalidEmailOtp = \"UpdateEmail/new-email-invalid-email-otp\", o.EmailExpired = \"UpdateEmail/new-email-verification-email-expired\", o.EmailSent = \"UpdateEmail/new-email-verification-email-sent\", o.EmailNotDeliverable = \"UpdateEmail/new-email-verification-email-not-deliverable\", o.InvalidEmail = \"UpdateEmail/new-email-invalid\", o.EmailAlreadyExists = \"UpdateEmail/new-email-already-exists\", o))(L || {}),\n  O = (n => (n.IDTokenCreated = \"Auth/id-token-created\", n))(O || {}),\n  b = (n => (n.SuccessSignIn = \"Farcaster/success_sign_in\", n))(b || {});\nvar U = (n => (n.Harmony = \"HARMONY\", n))(U || {});\nvar S = (n => (n.PhoneNumber = \"phone_number\", n))(S || {});\nvar w = (r => (r.Success = \"nft-checkout-success\", r.Failure = \"nft-checkout-failure\", r.Initiated = \"nft-checkout-initiated\", r.Disconnect = \"disconnect\", r))(w || {});\nvar D = (n => (n.WalletInfoFetched = \"Wallet/wallet-info-fetched\", n))(D || {});\nexport { O as AuthEventOnReceived, E as DeepLinkPage, R as DeviceVerificationEventEmit, A as DeviceVerificationEventOnReceived, U as EthChainType, d as Events, b as FarcasterLoginEventEmit, T as LoginWithEmailOTPEventEmit, I as LoginWithEmailOTPEventOnReceived, x as LoginWithMagicLinkEventEmit, N as LoginWithMagicLinkEventOnReceived, v as MagicIncomingWindowMessage, f as MagicOutgoingWindowMessage, g as MagicPayloadMethod, w as NftCheckoutIntermediaryEvents, _ as RPCErrorCode, h as RecencyCheckEventEmit, y as RecencyCheckEventOnReceived, S as RecoveryMethodType, m as SDKErrorCode, p as SDKWarningCode, k as UpdateEmailEventEmit, L as UpdateEmailEventOnReceived, D as WalletEventOnReceived, u as Wallets };","map":{"version":3,"names":["m","a","MissingApiKey","ModalNotReady","MalformedResponse","InvalidArgument","ExtensionNotInitialized","IncompatibleExtensions","p","l","SyncWeb3Method","DuplicateIframe","ReactNativeEndpointConfiguration","DeprecationNotice","ProductAnnouncement","_","t","ParseError","InvalidRequest","MethodNotFound","InvalidParams","InternalError","MagicLinkFailedVerification","MagicLinkExpired","MagicLinkRateLimited","MagicLinkInvalidRedirectURL","UserAlreadyLoggedIn","UpdateEmailFailed","UserRequestEditEmail","InactiveRecipient","AccessDeniedToUser","RedirectLoginComplete","u","s","MetaMask","CoinbaseWallet","d","i","WalletSelected","WalletConnected","WalletRejected","g","e","LoginWithSms","LoginWithEmailOTP","LoginWithMagicLink","LoginWithCredential","SetAuthorizationToken","GetIdToken","GenerateIdToken","GetMetadata","IsLoggedIn","Logout","UpdateEmail","UserSettings","UserSettingsTestMode","LoginWithSmsTestMode","LoginWithEmailOTPTestMode","LoginWithMagicLinkTestMode","LoginWithCredentialTestMode","GetIdTokenTestMode","GenerateIdTokenTestMode","GetMetadataTestMode","IsLoggedInTestMode","LogoutTestMode","UpdateEmailTestMode","IntermediaryEvent","RequestAccounts","GetInfo","ShowUI","NFTPurchase","NFTCheckout","NFTTransfer","RequestUserInfoWithUI","Disconnect","RecoverAccount","RecoverAccountTestMode","MagicBoxHeartBeat","AutoConnect","Login","EncryptV1","DecryptV1","ShowNFTs","ShowOnRamp","ShowSendTokensUI","ShowAddress","ShowBalances","SendGaslessTransaction","RevealPK","v","c","MAGIC_HANDLE_RESPONSE","MAGIC_OVERLAY_READY","MAGIC_SHOW_OVERLAY","MAGIC_HIDE_OVERLAY","MAGIC_HANDLE_EVENT","MAGIC_MG_BOX_SEND_RECEIPT","MAGIC_SEND_PRODUCT_ANNOUNCEMENT","f","n","MAGIC_HANDLE_REQUEST","E","MFA","Recovery","x","Retry","N","EmailSent","EmailNotDeliverable","T","VerifyEmailOtp","Cancel","I","EmailOTPSent","InvalidEmailOtp","ExpiredEmailOtp","R","A","r","DeviceApproved","DeviceNeedsApproval","DeviceVerificationLinkExpired","DeviceVerificationEmailSent","h","y","PrimaryAuthFactorNeedsVerification","PrimaryAuthFactorVerified","EmailExpired","k","RetryWithNewEmail","L","o","NewAuthFactorNeedsVerification","EmailUpdated","InvalidEmail","EmailAlreadyExists","O","IDTokenCreated","b","SuccessSignIn","U","Harmony","S","PhoneNumber","w","Success","Failure","Initiated","D","WalletInfoFetched","AuthEventOnReceived","DeepLinkPage","DeviceVerificationEventEmit","DeviceVerificationEventOnReceived","EthChainType","Events","FarcasterLoginEventEmit","LoginWithEmailOTPEventEmit","LoginWithEmailOTPEventOnReceived","LoginWithMagicLinkEventEmit","LoginWithMagicLinkEventOnReceived","MagicIncomingWindowMessage","MagicOutgoingWindowMessage","MagicPayloadMethod","NftCheckoutIntermediaryEvents","RPCErrorCode","RecencyCheckEventEmit","RecencyCheckEventOnReceived","RecoveryMethodType","SDKErrorCode","SDKWarningCode","UpdateEmailEventEmit","UpdateEmailEventOnReceived","WalletEventOnReceived","Wallets"],"sources":["/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/core/exception-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/core/json-rpc-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/core/message-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/core/deep-link-pages.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/modules/auth-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/modules/rpc-provider-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/modules/user-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/modules/nft-types.ts","/Users/richard/Documents/repos/email-noredirect-3otp/node_modules/@magic-sdk/types/src/modules/wallet-types.ts"],"sourcesContent":["export enum SDKErrorCode {\n  MissingApiKey = 'MISSING_API_KEY',\n  ModalNotReady = 'MODAL_NOT_READY',\n  MalformedResponse = 'MALFORMED_RESPONSE',\n  InvalidArgument = 'INVALID_ARGUMENT',\n  ExtensionNotInitialized = 'EXTENSION_NOT_INITIALIZED',\n  IncompatibleExtensions = 'INCOMPATIBLE_EXTENSIONS',\n}\n\nexport enum SDKWarningCode {\n  SyncWeb3Method = 'SYNC_WEB3_METHOD',\n  DuplicateIframe = 'DUPLICATE_IFRAME',\n  ReactNativeEndpointConfiguration = 'REACT_NATIVE_ENDPOINT_CONFIGURATION',\n  DeprecationNotice = 'DEPRECATION_NOTICE',\n  ProductAnnouncement = 'ANNOUNCEMENT',\n}\n\nexport enum RPCErrorCode {\n  // Standard JSON RPC 2.0 Error Codes\n  ParseError = -32700,\n  InvalidRequest = -32600,\n  MethodNotFound = -32601,\n  InvalidParams = -32602,\n  InternalError = -32603,\n\n  // Custom RPC Error Codes\n  MagicLinkFailedVerification = -10000,\n  MagicLinkExpired = -10001,\n  MagicLinkRateLimited = -10002,\n  MagicLinkInvalidRedirectURL = -10006,\n  UserAlreadyLoggedIn = -10003,\n  UpdateEmailFailed = -10004,\n  UserRequestEditEmail = -10005,\n  InactiveRecipient = -10010,\n  AccessDeniedToUser = -10011,\n  RedirectLoginComplete = -10015,\n}\n\nexport type ErrorCode = SDKErrorCode | RPCErrorCode;\nexport type WarningCode = SDKWarningCode;\n","import { RPCErrorCode } from './exception-types';\n\n// --- Request interfaces\n\nexport interface JsonRpcRequestPayload<TParams = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  method: string;\n  params?: TParams;\n}\n\nexport interface JsonRpcRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: JsonRpcResponsePayload | null): void;\n}\n\nexport interface JsonRpcBatchRequestCallback {\n  /** Callback executed upon JSON RPC response. */\n  (err: JsonRpcError | null, result?: (JsonRpcResponsePayload | null)[] | null): void;\n}\n\n// --- Response interfaces\n\nexport interface JsonRpcError {\n  message: string;\n  code: RPCErrorCode;\n  data?: any;\n}\n\nexport interface JsonRpcResponsePayload<ResultType = any> {\n  jsonrpc: string;\n  id: string | number | null;\n  result?: ResultType | null;\n  error?: JsonRpcError | null;\n}\n\nexport interface UserInfo {\n  email?: string;\n}\n\nexport interface WalletInfo {\n  walletType: 'magic' | 'metamask' | 'coinbase_wallet';\n}\n\nexport interface RequestUserInfoScope {\n  scope?: {\n    email?: 'required' | 'optional';\n  };\n}\n\nexport enum Wallets {\n  MetaMask = 'metamask',\n  CoinbaseWallet = 'coinbase_wallet',\n}\n\nexport enum Events {\n  WalletSelected = 'wallet_selected',\n  WalletConnected = 'wallet_connected',\n  WalletRejected = 'wallet_rejected',\n}\n\nexport interface UserEnv {\n  env: {\n    isMetaMaskInstalled: boolean;\n    isCoinbaseWalletInstalled: boolean;\n  };\n}\n\n// --- Payload methods\n\n/**\n * Enum of JSON RPC methods for interacting with the Magic SDK authentication\n * relayer.\n */\nexport enum MagicPayloadMethod {\n  LoginWithSms = 'magic_auth_login_with_sms',\n  LoginWithEmailOTP = 'magic_auth_login_with_email_otp',\n  LoginWithMagicLink = 'magic_auth_login_with_magic_link',\n  LoginWithCredential = 'magic_auth_login_with_credential',\n  SetAuthorizationToken = 'magic_auth_set_authorization_token',\n  GetIdToken = 'magic_auth_get_id_token',\n  GenerateIdToken = 'magic_auth_generate_id_token',\n  GetMetadata = 'magic_auth_get_metadata',\n  IsLoggedIn = 'magic_is_logged_in',\n  Logout = 'magic_auth_logout',\n  UpdateEmail = 'magic_auth_update_email',\n  UserSettings = 'magic_auth_settings',\n  UserSettingsTestMode = 'magic_auth_settings_testing_mode',\n  LoginWithSmsTestMode = 'magic_auth_login_with_sms_testing_mode',\n  LoginWithEmailOTPTestMode = 'magic_auth_login_with_email_otp_testing_mode',\n  LoginWithMagicLinkTestMode = 'magic_login_with_magic_link_testing_mode',\n  LoginWithCredentialTestMode = 'magic_auth_login_with_credential_testing_mode',\n  GetIdTokenTestMode = 'magic_auth_get_id_token_testing_mode',\n  GenerateIdTokenTestMode = 'magic_auth_generate_id_token_testing_mode',\n  GetMetadataTestMode = 'magic_auth_get_metadata_testing_mode',\n  IsLoggedInTestMode = 'magic_auth_is_logged_in_testing_mode',\n  LogoutTestMode = 'magic_auth_logout_testing_mode',\n  UpdateEmailTestMode = 'magic_auth_update_email_testing_mode',\n  IntermediaryEvent = 'magic_intermediary_event',\n  RequestAccounts = 'eth_requestAccounts',\n  GetInfo = 'magic_get_info',\n  ShowUI = 'magic_wallet',\n  NFTPurchase = 'magic_nft_purchase',\n  NFTCheckout = 'magic_nft_checkout',\n  NFTTransfer = 'magic_nft_transfer',\n  RequestUserInfoWithUI = 'mc_request_user_info',\n  Disconnect = 'mc_disconnect',\n  // UpdatePhoneNumber = 'magic_auth_update_phone_number',\n  // UpdatePhoneNumberTestMode = 'magic_auth_update_phone_number_testing_mode',\n  RecoverAccount = 'magic_auth_recover_account',\n  RecoverAccountTestMode = 'magic_auth_recover_account_testing_mode',\n  MagicBoxHeartBeat = 'magic_box_heart_beat',\n  AutoConnect = 'mc_auto_connect',\n  Login = 'mc_login',\n  EncryptV1 = 'magic_auth_encrypt_v1',\n  DecryptV1 = 'magic_auth_decrypt_v1',\n  ShowNFTs = 'magic_show_nfts',\n  ShowOnRamp = 'magic_show_fiat_onramp',\n  ShowSendTokensUI = 'magic_show_send_tokens_ui',\n  ShowAddress = 'magic_show_address',\n  ShowBalances = 'magic_show_balances',\n  SendGaslessTransaction = 'eth_sendGaslessTransaction',\n  RevealPK = 'magic_reveal_key',\n}\n","import { JsonRpcResponsePayload, JsonRpcError, JsonRpcRequestPayload } from './json-rpc-types';\n\nexport enum MagicIncomingWindowMessage {\n  MAGIC_HANDLE_RESPONSE = 'MAGIC_HANDLE_RESPONSE',\n  MAGIC_OVERLAY_READY = 'MAGIC_OVERLAY_READY',\n  MAGIC_SHOW_OVERLAY = 'MAGIC_SHOW_OVERLAY',\n  MAGIC_HIDE_OVERLAY = 'MAGIC_HIDE_OVERLAY',\n  MAGIC_HANDLE_EVENT = 'MAGIC_HANDLE_EVENT',\n  MAGIC_MG_BOX_SEND_RECEIPT = 'MAGIC_MG_BOX_SEND_RECEIPT',\n  MAGIC_SEND_PRODUCT_ANNOUNCEMENT = 'MAGIC_SEND_PRODUCT_ANNOUNCEMENT',\n}\n\nexport enum MagicOutgoingWindowMessage {\n  MAGIC_HANDLE_REQUEST = 'MAGIC_HANDLE_REQUEST',\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageRequest {\n  msgType: string;\n  payload: JsonRpcRequestPayload | JsonRpcRequestPayload[];\n  rt?: string;\n  jwt?: string;\n  deviceShare?: string;\n}\n\n/** The shape of responding window message datas from the Magic iframe context. */\nexport interface MagicMessageResponse<ResultType = any> {\n  msgType: string;\n  response: Partial<JsonRpcError> & Partial<JsonRpcResponsePayload<ResultType>>;\n  rt?: string;\n  deviceShare?: string;\n}\n\n/** The expected message event returned by the Magic iframe context. */\nexport interface MagicMessageEvent extends Partial<MessageEvent> {\n  data: MagicMessageResponse;\n}\n","export enum DeepLinkPage {\n  UpdateEmail = 'update-email',\n  MFA = 'mfa',\n  Recovery = 'recovery',\n}\n","import { WalletEventOnReceived } from './wallet-types';\n\nexport interface LoginWithMagicLinkConfiguration {\n  /**\n   * The email address of the user attempting to login.\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their email for the \"magic link\" to complete their\n   * authentication.\n   */\n  showUI?: boolean;\n\n  /**\n   * You can optionally provide a redirect URI that will be followed at the end\n   * of the magic link flow. Don't forget to invoke\n   * `magic.auth.loginWithCredential()` to complete the login from the route you\n   * configure here.\n   */\n  redirectURI?: string;\n\n  /**\n   * Enterprise users with a custom SMTP can create custom email templates\n   * from their dashboard. The default Magic loginWithMagicLink email will be\n   * overriden when a variation is passed here.\n   */\n  overrides?: {\n    variation?: string;\n  };\n}\n\nexport interface LoginWithSmsConfiguration {\n  /**\n   * Specify the phone number of the user attempting to login.\n   */\n  phoneNumber: string;\n}\nexport interface LoginWithEmailOTPConfiguration {\n  /**\n   * Specify the email address of the user attempting to login.\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built modal interface will show to the user, directing\n   * them to check their email for the one time passcode (OTP) to complete their\n   * authentication.\n   *\n   * When `false`, developers will be able to implement their own custom UI to\n   * continue the email OTP flow.\n   */\n  showUI?: boolean;\n\n  /**\n   * Device Unrecognized UI will enforce showing up to secure user's login\n   *\n   * When set to true (default), an improved device recognition UI will be displayed to the user,\n   * prompting them to verify their login by checking their email for device approval. This feature\n   * enhances authentication security.\n   *\n   * This param will only be affect if showUI is false. When set to false,\n   * developers have the flexibility to implement their own customized UI to\n   * handle device check events, providing a more tailored user experience.\n   */\n  deviceCheckUI?: boolean;\n\n  /**\n   * Enterprise users with a custom SMTP can create custom email templates\n   * from their dashboard. The default Magic loginWithOTP email will be\n   * overriden when a variation is passed here.\n   */\n  overrides?: {\n    variation?: string;\n  };\n}\n\n/**\n * Auth Events Enum\n */\nexport enum LoginWithMagicLinkEventEmit {\n  Retry = 'retry',\n}\n\nexport enum LoginWithMagicLinkEventOnReceived {\n  EmailSent = 'email-sent',\n  EmailNotDeliverable = 'email-not-deliverable',\n}\n\nexport enum LoginWithEmailOTPEventEmit {\n  VerifyEmailOtp = 'verify-email-otp',\n  Cancel = 'cancel',\n}\n\nexport enum LoginWithEmailOTPEventOnReceived {\n  EmailOTPSent = 'email-otp-sent',\n  InvalidEmailOtp = 'invalid-email-otp',\n  ExpiredEmailOtp = 'expired-email-otp',\n}\n\nexport enum DeviceVerificationEventEmit {\n  Retry = 'device-retry',\n}\n\nexport enum DeviceVerificationEventOnReceived {\n  DeviceApproved = 'device-approved',\n  DeviceNeedsApproval = 'device-needs-approval',\n  DeviceVerificationLinkExpired = 'device-verification-link-expired',\n  DeviceVerificationEmailSent = 'device-verification-email-sent',\n}\n\nexport enum RecencyCheckEventEmit {\n  Retry = 'Recency/auth-factor-retry',\n  Cancel = 'Recency/auth-factor-verification-cancel',\n  VerifyEmailOtp = 'Recency/auth-factor-verify-email-otp',\n}\n\nexport enum RecencyCheckEventOnReceived {\n  PrimaryAuthFactorNeedsVerification = 'Recency/auth-factor-needs-verification',\n  PrimaryAuthFactorVerified = 'Recency/auth-factor-verified',\n  InvalidEmailOtp = 'Recency/auth-factor-invalid-email-otp',\n  EmailExpired = 'Recency/auth-factor-verification-email-expired',\n  EmailSent = 'Recency/auth-factor-verification-email-sent',\n  EmailNotDeliverable = 'Recency/auth-factor-verification-email-not-deliverable',\n}\n\nexport enum UpdateEmailEventEmit {\n  RetryWithNewEmail = 'UpdateEmail/retry-with-new-email',\n  Cancel = 'UpdateEmail/new-email-verification-cancel',\n  VerifyEmailOtp = 'UpdateEmail/new-email-verify-otp',\n}\n\nexport enum UpdateEmailEventOnReceived {\n  NewAuthFactorNeedsVerification = 'UpdateEmail/new-email-needs-verification',\n  EmailUpdated = 'UpdateEmail/email-updated',\n  InvalidEmailOtp = 'UpdateEmail/new-email-invalid-email-otp',\n  EmailExpired = 'UpdateEmail/new-email-verification-email-expired',\n  EmailSent = 'UpdateEmail/new-email-verification-email-sent',\n  EmailNotDeliverable = 'UpdateEmail/new-email-verification-email-not-deliverable',\n  InvalidEmail = 'UpdateEmail/new-email-invalid',\n  EmailAlreadyExists = 'UpdateEmail/new-email-already-exists',\n}\n\nexport enum AuthEventOnReceived {\n  IDTokenCreated = 'Auth/id-token-created',\n}\n\nexport enum FarcasterLoginEventEmit {\n  SuccessSignIn = 'Farcaster/success_sign_in',\n}\n\n/**\n * EventHandlers\n */\nexport type LoginWithMagicLinkEventHandlers = {\n  // Event Received\n  [LoginWithMagicLinkEventOnReceived.EmailSent]: () => void;\n  [LoginWithMagicLinkEventOnReceived.EmailNotDeliverable]: () => void;\n\n  // Event sent\n  [LoginWithMagicLinkEventEmit.Retry]: () => void;\n} & DeviceVerificationEventHandlers;\n\nexport type LoginWithEmailOTPEventHandlers = {\n  // Event Received\n  [LoginWithEmailOTPEventOnReceived.EmailOTPSent]: () => void;\n  [LoginWithEmailOTPEventOnReceived.InvalidEmailOtp]: () => void;\n  [LoginWithEmailOTPEventOnReceived.ExpiredEmailOtp]: () => void;\n  [AuthEventOnReceived.IDTokenCreated]: (idToken: string) => void;\n  [WalletEventOnReceived.WalletInfoFetched]: () => void;\n\n  // Event sent\n  [LoginWithEmailOTPEventEmit.VerifyEmailOtp]: (otp: string) => void;\n  [LoginWithEmailOTPEventEmit.Cancel]: () => void;\n} & DeviceVerificationEventHandlers;\n\ntype DeviceVerificationEventHandlers = {\n  // Event Received\n  [DeviceVerificationEventOnReceived.DeviceNeedsApproval]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceVerificationEmailSent]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceVerificationLinkExpired]: () => void;\n  [DeviceVerificationEventOnReceived.DeviceApproved]: () => void;\n\n  // Event sent\n  [DeviceVerificationEventEmit.Retry]: () => void;\n};\n\n/**\n * Update Email\n */\n\ntype RecencyCheckEventHandlers = {\n  [RecencyCheckEventOnReceived.PrimaryAuthFactorNeedsVerification]: () => void;\n  [RecencyCheckEventOnReceived.PrimaryAuthFactorVerified]: () => void;\n  [RecencyCheckEventOnReceived.InvalidEmailOtp]: () => void;\n  [RecencyCheckEventOnReceived.EmailNotDeliverable]: () => void;\n  [RecencyCheckEventOnReceived.EmailExpired]: () => void;\n  [RecencyCheckEventOnReceived.EmailSent]: () => void;\n\n  [RecencyCheckEventEmit.Cancel]: () => void;\n  [RecencyCheckEventEmit.Retry]: () => void;\n  [RecencyCheckEventEmit.VerifyEmailOtp]: (otp: string) => void;\n};\n\nexport type UpdateEmailEventHandlers = {\n  [UpdateEmailEventOnReceived.NewAuthFactorNeedsVerification]: () => void;\n  [UpdateEmailEventOnReceived.EmailUpdated]: () => void;\n  [UpdateEmailEventOnReceived.InvalidEmailOtp]: () => void;\n  [UpdateEmailEventOnReceived.EmailNotDeliverable]: () => void;\n  [UpdateEmailEventOnReceived.EmailExpired]: () => void;\n  [UpdateEmailEventOnReceived.EmailSent]: () => void;\n  [UpdateEmailEventOnReceived.InvalidEmail]: () => void;\n  [UpdateEmailEventOnReceived.EmailAlreadyExists]: () => void;\n\n  [UpdateEmailEventEmit.Cancel]: () => void;\n  [UpdateEmailEventEmit.RetryWithNewEmail]: (email?: string) => void;\n  [UpdateEmailEventEmit.VerifyEmailOtp]: (otp: string) => void;\n} & RecencyCheckEventHandlers;\n","export type EthNetworkName = 'mainnet' | 'goerli' | 'sepolia';\n\nexport enum EthChainType {\n  Harmony = 'HARMONY',\n}\n\nexport interface CustomNodeConfiguration {\n  rpcUrl: string;\n  chainId?: number;\n  chainType?: EthChainType;\n}\n\nexport type EthNetworkConfiguration = EthNetworkName | CustomNodeConfiguration;\n\nexport type ProviderEnableEvents = {\n  'id-token-created': (params: { idToken: string }) => void;\n};\n","import { DeepLinkPage } from '../core/deep-link-pages';\n\nexport interface GetIdTokenConfiguration {\n  /**\n   * The number of seconds until the generated ID token will expire.\n   */\n  lifespan?: number;\n}\n\nexport interface GenerateIdTokenConfiguration extends GetIdTokenConfiguration {\n  /**\n   * An optional piece of data to sign with the token. Note, however, that the\n   * unsigned data _will not_ be encoded in the token, only an encrypted\n   * signature of the data.\n   */\n  attachment?: string;\n}\n\nexport interface MagicUserMetadata {\n  issuer: string | null;\n  publicAddress: string | null;\n  email: string | null;\n  phoneNumber: string | null;\n  isMfaEnabled: boolean;\n  recoveryFactors: [RecoveryFactor];\n}\n\ntype RecoveryFactor = {\n  type: RecoveryMethodType;\n  value: string;\n};\n\nexport enum RecoveryMethodType {\n  PhoneNumber = 'phone_number',\n}\n\nexport interface UpdateEmailConfiguration {\n  /**\n   * The new email address to update to\n   */\n  email: string;\n\n  /**\n   * When `true`, a pre-built pending modal interface will\n   * guide the user to check their new, followed by old emails\n   * for confirmation emails.\n   */\n  showUI?: boolean;\n}\n\nexport interface UpdateWebAuthnInfoConfiguration {\n  /**\n   *  WebAuthn info id\n   */\n  id: string;\n\n  /**\n   *  nickname that user attempts to update to the webauth device associate to the id.\n   */\n  nickname: string;\n}\n\nexport interface RecoverAccountConfiguration {\n  /**\n   * The email to recover\n   */\n  email: string;\n}\n\nexport interface ShowSettingsConfiguration {\n  /**\n   * deep linking destination\n   */\n  page: DeepLinkPage;\n}\n","export type NFTResponseStatus = 'cancelled' | 'pending' | 'processed' | 'declined' | 'expired';\n\nexport type NFTResponse = {\n  status: NFTResponseStatus;\n};\n\nexport interface NFTPurchaseRequest {\n  nft: {\n    name: string;\n    imageUrl: string;\n    blockchainNftId: string;\n    contractAddress: string;\n    network: string;\n    platform: string;\n    type: string;\n  };\n  identityPrefill: {\n    firstName: string;\n    lastName: string;\n    dateOfBirth: string; // YYYY-MM-DD\n    emailAddress: string;\n    phone: string;\n    address: {\n      street1: string;\n      street2: string;\n      city: string;\n      regionCode: string;\n      postalCode: string;\n      countryCode: string;\n    };\n  };\n}\n\nexport type NFTPurchaseResponse = NFTResponse & {\n  errorMessage?: string;\n};\n\nexport interface NFTCheckoutRequest {\n  // given by magic / found in the developer dashboard in future\n  contractId: string;\n  // in contract, if ERC1155… for ERC721, use token ID = 0\n  tokenId: string;\n  name: string;\n  imageUrl: string;\n  quantity?: number; // default is 1\n  walletAddress?: string; // default is user's wallet address\n  // If enabled, the user will be able to pay with crypto. the default is false\n  isCryptoCheckoutEnabled?: boolean;\n}\n\nexport type NFTCheckoutResponse = NFTResponse;\n\nexport type NFTCheckoutEvents = {\n  disconnect: () => void;\n  'nft-checkout-initiated': (rawTransaction: string) => void;\n};\n\nexport enum NftCheckoutIntermediaryEvents {\n  Success = 'nft-checkout-success',\n  Failure = 'nft-checkout-failure',\n  Initiated = 'nft-checkout-initiated',\n  Disconnect = 'disconnect',\n}\n\nexport type NftCheckoutEventHandler = {\n  [NftCheckoutIntermediaryEvents.Initiated]: (rawTransaction: string) => void;\n  [NftCheckoutIntermediaryEvents.Success]: (signedTransaction: string) => void;\n  [NftCheckoutIntermediaryEvents.Failure]: () => void;\n};\n\nexport interface NFTTransferRequest {\n  tokenId: string;\n  contractAddress: string;\n  quantity?: number;\n  recipient?: string;\n}\n\nexport type NFTTransferResponse = NFTResponse;\n","export type GasApiResponse = {\n  request_id: string;\n  state: string;\n  success: boolean;\n};\n\nexport type AccessListEntry = { address: string; storageKeys: Array<string> };\n\n/**\n *  An ordered collection of [[AccessList]] entries.\n */\nexport type AccessList = Array<AccessListEntry>;\n\nexport interface GaslessTransactionRequest {\n  /**\n   *  The transaction type.\n   */\n  type?: number;\n\n  /**\n   *  The target of the transaction.\n   */\n  to?: string;\n\n  /**\n   *  The sender of the transaction.\n   */\n  from?: string;\n\n  /**\n   *  The nonce of the transaction, used to prevent replay attacks.\n   */\n\n  nonce?: number;\n\n  /**\n   *  The maximum amount of gas to allow this transaction to consime.\n   */\n  gasLimit?: bigint;\n\n  /**\n   *  The gas price to use for legacy transactions or transactions on\n   *  legacy networks.\n   *\n   *  Most of the time the ``max*FeePerGas`` is preferred.\n   */\n  gasPrice?: bigint;\n\n  /**\n   *  The [[link-eip-1559]] maximum priority fee to pay per gas.\n   */\n  maxPriorityFeePerGas?: bigint;\n\n  /**\n   *  The [[link-eip-1559]] maximum total fee to pay per gas. The actual\n   *  value used is protocol enforced to be the block's base fee.\n   */\n  maxFeePerGas?: bigint;\n\n  /**\n   *  The transaction data.\n   */\n  data?: string;\n\n  /**\n   *  The transaction value (in wei).\n   */\n  value?: bigint;\n\n  /**\n   *  The chain ID for the network this transaction is valid on.\n   */\n  chainId?: bigint;\n\n  /**\n   *  The [[link-eip-2930]] access list. Storage slots included in the access\n   *  list are //warmed// by pre-loading them, so their initial cost to\n   *  fetch is guaranteed, but then each additional access is cheaper.\n   */\n  accessList?: AccessList;\n\n  /**\n   *  A custom object, which can be passed along for network-specific\n   *  values.\n   */\n  customData?: any;\n}\n\nexport enum WalletEventOnReceived {\n  WalletInfoFetched = 'Wallet/wallet-info-fetched',\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}