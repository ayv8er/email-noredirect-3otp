import { LoginWithMagicLinkConfiguration, LoginWithSmsConfiguration, LoginWithEmailOTPConfiguration, UpdateEmailConfiguration } from '@magic-sdk/types';
import { BaseModule } from './base-module';
export declare const ProductConsolidationMethodRemovalVersions: {
    'magic-sdk': string;
    '@magic-sdk/react-native': string;
    '@magic-sdk/react-native-bare': string;
    '@magic-sdk/react-native-expo': string;
};
export declare class AuthModule extends BaseModule {
    /**
     * Initiate the "magic link" login flow for a user. If the flow is successful,
     * this method will return a Decentralized ID token (with a default lifespan
     * of 15 minutes).
     */
    loginWithMagicLink(configuration: LoginWithMagicLinkConfiguration): import("..").PromiEvent<string | null, {
        "email-sent": () => void;
        "email-not-deliverable": () => void;
        retry: () => void;
    } & {
        "device-needs-approval": () => void;
        "device-verification-email-sent": () => void;
        "device-verification-link-expired": () => void;
        "device-approved": () => void;
        "device-retry": () => void;
    } & {
        done: (result: string | null) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    /**
     * Initiate an SMS login flow for a user. If successful,
     * this method will return a Decenteralized ID token (with a default lifespan
     * of 15 minutes)
     */
    loginWithSMS(configuration: LoginWithSmsConfiguration): import("..").PromiEvent<string | null, {
        done: (result: string | null) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    /**
     * Initiate an Email with OTP login flow for a user. If successful,
     * this method will return a Decenteralized ID token (with a default lifespan
     * of 15 minutes)
     */
    loginWithEmailOTP(configuration: LoginWithEmailOTPConfiguration): import("..").PromiEvent<string | null, {
        "email-otp-sent": () => void;
        "invalid-email-otp": () => void;
        "expired-email-otp": () => void;
        "Auth/id-token-created": (idToken: string) => void;
        "Wallet/wallet-info-fetched": () => void;
        "verify-email-otp": (otp: string) => void;
        cancel: () => void;
    } & {
        "device-needs-approval": () => void;
        "device-verification-email-sent": () => void;
        "device-verification-link-expired": () => void;
        "device-approved": () => void;
        "device-retry": () => void;
    } & {
        done: (result: string | null) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    /**
     * Log a user in with a special one-time-use credential token. This is
     * currently used during magic link flows with a configured redirect to
     * hydrate the user session at the end of the flow. If the flow is successful,
     * this method will return a Decentralized ID token (with a default lifespan
     * of 15 minutes).
     *
     * If no argument is provided, a credential is automatically parsed from
     * `window.location.search`.
     */
    loginWithCredential(credentialOrQueryString?: string): import("..").PromiEvent<string | null, {
        done: (result: string | null) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    setAuthorizationToken(jwt: string): import("..").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    updateEmailWithUI(configuration: UpdateEmailConfiguration): import("..").PromiEvent<string | null, {
        "UpdateEmail/new-email-needs-verification": () => void;
        "UpdateEmail/email-updated": () => void;
        "UpdateEmail/new-email-invalid-email-otp": () => void;
        "UpdateEmail/new-email-verification-email-not-deliverable": () => void;
        "UpdateEmail/new-email-verification-email-expired": () => void;
        "UpdateEmail/new-email-verification-email-sent": () => void;
        "UpdateEmail/new-email-invalid": () => void;
        "UpdateEmail/new-email-already-exists": () => void;
        "UpdateEmail/new-email-verification-cancel": () => void;
        "UpdateEmail/retry-with-new-email": (email?: string | undefined) => void;
        "UpdateEmail/new-email-verify-otp": (otp: string) => void;
    } & {
        "Recency/auth-factor-needs-verification": () => void;
        "Recency/auth-factor-verified": () => void;
        "Recency/auth-factor-invalid-email-otp": () => void;
        "Recency/auth-factor-verification-email-not-deliverable": () => void;
        "Recency/auth-factor-verification-email-expired": () => void;
        "Recency/auth-factor-verification-email-sent": () => void;
        "Recency/auth-factor-verification-cancel": () => void;
        "Recency/auth-factor-retry": () => void;
        "Recency/auth-factor-verify-email-otp": (otp: string) => void;
    } & {
        done: (result: string | null) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
}
