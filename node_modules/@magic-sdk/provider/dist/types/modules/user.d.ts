import { GetIdTokenConfiguration, MagicUserMetadata, GenerateIdTokenConfiguration, UserInfo, RequestUserInfoScope, RecoverAccountConfiguration, ShowSettingsConfiguration } from '@magic-sdk/types';
import { BaseModule } from './base-module';
declare type UserLoggedOutCallback = (loggedOut: boolean) => void;
export declare class UserModule extends BaseModule {
    getIdToken(configuration?: GetIdTokenConfiguration): import("../util").PromiEvent<string, {
        done: (result: string) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    generateIdToken(configuration?: GenerateIdTokenConfiguration): import("../util").PromiEvent<string, {
        done: (result: string) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    getInfo(): Promise<MagicUserMetadata>;
    isLoggedIn(): import("../util").PromiEvent<boolean, any>;
    logout(): import("../util").PromiEvent<boolean, any>;
    requestInfoWithUI(scope?: RequestUserInfoScope): import("../util").PromiEvent<UserInfo, {
        done: (result: UserInfo) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    showSettings(configuration?: ShowSettingsConfiguration): import("../util").PromiEvent<MagicUserMetadata, {
        done: (result: MagicUserMetadata) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    recoverAccount(configuration: RecoverAccountConfiguration): import("../util").PromiEvent<boolean | null, {
        done: (result: boolean | null) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    revealPrivateKey(): import("../util").PromiEvent<boolean, {
        done: (result: boolean) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    getMetadata(): import("../util").PromiEvent<MagicUserMetadata, {
        done: (result: MagicUserMetadata) => void;
        error: (reason: any) => void;
        settled: () => void;
    }>;
    onUserLoggedOut(callback: UserLoggedOutCallback): void;
    private emitUserLoggedOut;
    private localForageKey;
    private localForageIsLoggedInKey;
    private userLoggedOutCallbacks;
}
export {};
